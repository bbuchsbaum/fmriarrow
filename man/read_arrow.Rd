% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_arrow.R
\name{read_arrow}
\alias{read_arrow}
\title{Read Parquet-format fMRI Data into ParquetNeuroVec}
\usage{
read_arrow(file_name, lazy = TRUE)
}
\arguments{
\item{file_name}{character. Path to the .fpar file to read.}

\item{lazy}{logical. Whether to use lazy loading for data access (default: TRUE).
Lazy loading is recommended for large datasets to minimize memory usage.}
}
\value{
A `ParquetNeuroVec` object providing NeuroVec-compatible access
  to the spatially-indexed fMRI data.
}
\description{
Reads a .fpar (fMRI Parquet) file into a `ParquetNeuroVec` object,
mirroring the `neuroim2::read_vec()` pattern for reading neuroimaging data.
This function provides the standard entry point for accessing Parquet-stored
fMRI data with array-like syntax and spatial indexing.
}
\details{
This function mirrors the `neuroim2::read_vec()` API pattern:
- `read_vec()` reads NIfTI/ANALYZE files → `NeuroVec` objects
- `read_arrow()` reads .fpar files → `ParquetNeuroVec` objects

The resulting `ParquetNeuroVec` object supports:
- Array-like access: `obj[x, y, z, t]`
- Time series extraction: `series(obj, x, y, z)`
- ROI analysis: `series_roi(obj, x_range, y_range, z_range)`
- Standard NeuroVec methods: `dim()`, `length()`, etc.
}
\examples{
\dontrun{
# Read .fpar file (mirrors read_vec pattern)
pvec <- read_arrow("subject_data.fpar")

# Use with familiar NeuroVec-like syntax
dims <- dim(pvec)                           # Get dimensions
n_timepoints <- length(pvec)                # Get temporal length  

# Extract time series
voxel_ts <- series(pvec, 32, 32, 15)        # Single voxel
roi_ts <- series_roi(pvec, 30:35, 30:35, 10:20)  # ROI average

# Array subsetting
sub_data <- pvec[25:35, 25:35, 10:15, 1:50] # 4D subarray

# Compare with neuroim2 workflow:
# neuro_vec <- neuroim2::read_vec("data.nii.gz")  # NIfTI → NeuroVec
# pvec <- read_arrow("data.fpar")                  # Parquet → ParquetNeuroVec
}
}
\seealso{
- `ParquetNeuroVec()` for direct object creation
- `as_parquet_neurovec()` for NeuroVec → ParquetNeuroVec conversion
- `neurovec_to_fpar()` for creating .fpar files from NeuroVec objects
}
